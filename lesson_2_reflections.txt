What happens when you initialize a repository? Why do you need to do it?
--A .git folder is created to store metadata. To start using git
How is the staging area different from the working directory and the repository? What value do you think it offers?
--Specifies what changes to commit. To choose what file(s) to commit and what not. To control what changes you want to commit
How can you use the staging area to make sure you have one commit per logical change?
--You can add files with changes to the staging area and later commit all those files which are required for a logical change
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
--Branches are useful for when you have working code and want to try a variation in functionality without breaking what you
currently have. The master branch stays unchanged and working, but you are free to make any changes to the new development/experimental branch.
How do the diagrams help you visualize the branch structure?
--The diagram shows at which commit you check out your branch and what commits from master are missing in your branch
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
-- The result of merging two branches together is a combined commit with all the changes from both branches. We represent the merge in the diagram as
having two parents - the two commits that it combined. For non-merge commits, the parent of the commit is the state of the files before that
commit was made.  For merge commits, there was no one state of the files before the commit was made, since the merge commit combines two commits
together, so it makes sense for the merge commit to have two parents.
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
--Git's automatic merging can save the user a lot of time! Especially when
multiple people are working together, merging everything manually could be
very painful.

The downside of automatic merging is that it's not perfect. Merging the
coins branch with the master branch, which included color, resulted in
inconsistent visuals, where most items were colored but the coins were not.
Git could even make worse mistakes - for example, if one branch deleted a
function, and another branch added a call to that function, Git would merge
those together with no conflict and the resulting code would be broken.

Overall, Git's merging can save a lot of time, but it's important to always
double check that the code still works after doing a merge.